@startuml Сапер_Игра

title Диаграмма классов: Игра "Сапер"

skinparam class {
    BackgroundColor White
    BorderColor Black
    ArrowColor #006600
}

' === ИНТЕРФЕЙСЫ ===
interface Clickable {
    + onClick(): void
    + onRightClick(): void
}

interface Renderable {
    + render(): void
}

interface GameState {
    + handleInput(): void
    + update(): void
    + render(): void
}

' === АБСТРАКТНЫЕ КЛАССЫ ===
abstract class Cell {
    # isRevealed: boolean
    # isFlagged: boolean
    # position: Position
    # neighbors: List<Cell>
    --
    + reveal(): void
    + toggleFlag(): void
    + calculateNeighborMines(): int
    # onReveal(): void
    + isSafe(): boolean
}

abstract class GameMode {
    # difficulty: Difficulty
    # board: GameBoard
    --
    + initialize(): void
    + validateWin(): boolean
    + getHint(): Position
    + getTimeLimit(): int
}

' === ПЕРЕЧИСЛЕНИЯ ===
enum Difficulty {
    BEGINNER
    INTERMEDIATE
    EXPERT
    CUSTOM
}

enum GameStatus {
    NOT_STARTED
    IN_PROGRESS
    PAUSED
    WON
    LOST
}

enum CellType {
    EMPTY
    MINE
    NUMBER
}

' === КОНКРЕТНЫЕ КЛАССЫ ===
class Position {
    - x: int
    - y: int
    --
    + getX(): int
    + getY(): int
    + equals(other: Position): boolean
    + getNeighbors(): List<Position>
    + isValid(maxX: int, maxY: int): boolean
}

class MineCell extends Cell implements Clickable {
    - explosionPower: int
    --
    + onClick(): void
    + onRightClick(): void
    # onReveal(): void
    + triggerExplosion(): void
}

class NumberCell extends Cell implements Clickable {
    - adjacentMines: int
    --
    + onClick(): void
    + onRightClick(): void
    # onReveal(): void
    + setAdjacentMines(count: int): void
    + getDisplayValue(): String
}

class EmptyCell extends Cell implements Clickable {
    --
    + onClick(): void
    + onRightClick(): void
    # onReveal(): void
    + revealNeighbors(): void
}

class GameBoard implements Renderable {
    - cells: Cell[][]
    - width: int
    - height: int
    - totalMines: int
    - revealedCells: int
    --
    + initialize(difficulty: Difficulty): void
    + revealCell(pos: Position): boolean
    + toggleFlag(pos: Position): void
    + getCell(pos: Position): Cell
    + calculateAllNumbers(): void
    + revealAllMines(): void
    + getRemainingMines(): int
    + render(): void
}

class ScoreManager {
    - score: int
    - startTime: long
    - endTime: long
    - bestScores: Map<Difficulty, Integer>
    --
    + startTimer(): void
    + stopTimer(): void
    + getElapsedTime(): long
    + calculateScore(): int
    + saveBestScore(): void
    + loadBestScores(): void
    + reset(): void
}

class GameController {
    - board: GameBoard
    - scoreManager: ScoreManager
    - currentState: GameState
    - gameMode: GameMode
    - status: GameStatus
    --
    + startNewGame(difficulty: Difficulty): void
    + handleClick(pos: Position, isRightClick: boolean): void
    + pauseGame(): void
    + resumeGame(): void
    + saveGame(): void
    + loadGame(): void
    + changeState(newState: GameState): void
}

class ClassicMode extends GameMode {
    - maxFlags: int
    --
    + initialize(): void
    + validateWin(): boolean
    + getHint(): Position
    + getTimeLimit(): int
    + useFlag(): boolean
}

class TimeTrialMode extends GameMode {
    - timeLimit: int
    - timeElapsed: int
    --
    + initialize(): void
    + validateWin(): boolean
    + getHint(): Position
    + getTimeLimit(): int
    + updateTime(): void
}

class DifficultySettings {
    - width: int
    - height: int
    - mineCount: int
    --
    + getWidth(): int
    + getHeight(): int
    + getMineCount(): int
    + validateSettings(): boolean
}

class GameRenderer implements Renderable {
    - boardRenderer: BoardRenderer
    - UIRenderer: UIRenderer
    - animationManager: AnimationManager
    --
    + render(): void
    + renderBoard(): void
    + renderUI(): void
    + playAnimation(animation: Animation): void
}

class BoardRenderer {
    - cellSize: int
    - textures: Map<CellType, Texture>
    --
    + renderCell(cell: Cell): void
    + renderGrid(): void
    + loadTextures(): void
}

class UIRenderer {
    - font: Font
    - colors: ColorScheme
    --
    + renderTimer(time: int): void
    + renderMineCounter(count: int): void
    + renderScore(score: int): void
    + renderMenu(): void
}

class AnimationManager {
    - activeAnimations: List<Animation>
    --
    + addAnimation(animation: Animation): void
    + updateAnimations(): void
    + clearAnimations(): void
}

' === СВЯЗИ ===
' Композиции
GameController *-- "1" GameBoard
GameController *-- "1" ScoreManager
GameController *-- "1" GameMode
GameBoard *-- "many" Cell
GameRenderer *-- "1" BoardRenderer
GameRenderer *-- "1" UIRenderer

' Агрегации
GameController o-- "1" GameState
GameMode o-- "1" DifficultySettings
GameRenderer o-- "1" AnimationManager

' Наследование
Cell <|-- MineCell
Cell <|-- NumberCell
Cell <|-- EmptyCell
GameMode <|-- ClassicMode
GameMode <|-- TimeTrialMode

' Реализация интерфейсов
Clickable <|.. MineCell
Clickable <|.. NumberCell
Clickable <|.. EmptyCell
Renderable <|.. GameBoard
Renderable <|.. GameRenderer
GameState <|.. InProgressState
GameState <|.. PausedState
GameState <|.. MenuState

' Ассоциации
GameBoard --> Position
GameBoard --> "neighbors" Cell
Cell --> Position
ScoreManager --> Difficulty

' Зависимости
GameController --> GameStatus
GameMode --> Difficulty
BoardRenderer --> CellType

note top of Cell
    Абстрактный базовый класс для всех ячеек.
    Реализует общую логику открытия и флагов.
end note

note right of GameController
    Основной контроллер игры.
    Управляет состоянием и координирует
    взаимодействие между компонентами.
end note

note left of GameBoard
    Представляет игровое поле.
    Содержит сетку ячеек и управляет
    их взаимодействием.
end note

@enduml